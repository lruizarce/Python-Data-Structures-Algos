What is the need for Complexity Analysis?
    a. Which approach is better?
        - Which approx uses less time and less memory
    b. Why care about identifying which approach is better?
        - Huge amount of data which means a significant change in performance when thinking about the optimal solution. 
    c. What does better mean?
        - faster and uses less memory

What is Time Complexity Analysis?
    a. Measure time on different machines with different hardware. 
    b. Count the number of simple operations the computer has to do.
    c. How runtime grows as the input size grows.

Asymptotic Analysis
    a. As N increases we want to know the trend of N we can use a graph.
    b. What is asymptotic Analysis
        - F(n) = n + 3 and n =1,000,000 we can say the time complexity of that algorithmn is O(n). As n --> inf the 3 becomes insignificant. 
    c. Ex. f(n) = 2n^2 + 5n we only care about n^2 so O(n^2)

What is Big O?
    a. f(n) = 5n + 3 --> O(n)
    b. We care about the upper bound or the worst case.

Common Complexities
    - As the input size increases, the time taken increases linearly. 
    - Complexity increases proportionally. 
    - O(1): time is constant
    - O(log n): binary search algorithm
    - O(n): grows linearly
    - O(n logn): merge sort
    - O(n^2): [1,2,3] --> (1,1), (1,2)......(3,3)
    - O(2^n): Fibonacci
    - O(n!): 
Space Complexity
    - Extra space consumed by the algorithm
    - O(1): the space does not scale as size increases
    - How much auxiliary memory needed to run the algorithm


